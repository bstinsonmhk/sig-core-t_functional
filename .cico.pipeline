def onmyduffynode(script){
    ansiColor('xterm'){
        timestamps{
            sh 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root ${DUFFY_NODE}.ci.centos.org -t "' + script + '"'
        }
    }
}

def syncfromduffynode(rsyncpath){
    sh 'rsync -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root " -Ha --include=' +  rsyncpath +  " ${DUFFY_NODE}.ci.centos.org:~/ ./"
}

node('centos-core'){

    stage('Allocate Node'){
        env.CICO_API_KEY = readFile("${env.HOME}/duffy.key").trim()
        duffy_rtn=sh(
            script: 'cico --debug node get -f value -c hostname -c comment',
            returnStdout: true
            ).trim().tokenize(' ')
        env.DUFFY_NODE=duffy_rtn[0]
        env.SSID=duffy_rtn[1]
    }

    try{
        stage('Pre Setup Node'){
            onmyduffynode 'yum -y install git'
        }

        stage('Clone Test Suite') {
            onmyduffynode "git clone -b \"meltdown\" https://github.com/bstinsonmhk/sig-core-t_functional"
        }

        stage('Run Test Suite') {
            onmyduffynode 'cd sig-core-t_functional && rm -rf /etc/yum.repos.d/*.repo && cp -v preupdates/*.repo /etc/yum.repos.d/'

            try {
                onmyduffynode 'yum -y update && reboot ||:'
            }catch (ignore){
            }

            timeout(time: 20, unit: 'MINUTES'){
                waitUntil {
                    script {
                        def ret = sh script: 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root ${DUFFY_NODE}.ci.centos.org -t date', returnStatus: true
                        return (ret == 0);
                    }
                }
            }

            timeout(time: 4, unit: 'HOURS'){
                onmyduffynode 'cd sig-core-t_functional && chmod +x ./runtests.sh && env PRE_UPDATES=1 ./runtests.sh'
            }
        }

    }catch (e){
        currentBuild.result = "FAILED"
        throw e 
    } finally {
        stage('Deallocate Node'){
            sh 'cico node done ${SSID}'
        }
    }
}
